/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.grpc.TaskProto;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

// Key Value store
class BookRepository {
    private final HashMap<Integer, Book> books = new HashMap<>();
    private final HashMap<String, Integer> isbnLookup = new HashMap<>();

    private final Random random = new Random();

    public int addBook(String isbn, String title, List<String> authors, int page_count) {
        if (isbnLookup.containsKey(isbn)) {
            throw new IllegalArgumentException("ISBN [" + isbn + "] is already registered.");
        }
        Book newBook = new Book(isbn, title, authors, page_count);
        int id = random.nextInt(Integer.MAX_VALUE);

        books.put(id, newBook);
        isbnLookup.put(isbn, id);

        return id;
    }

    public Book getBook(int id, List<Integer> fields) {
        if (!books.containsKey(id))
            throw new IllegalArgumentException("ID [" + id + "] is not valid.");
        return books.get(id);
    }

    public Book getBook(String isbn, List<Integer> fields) {
        if (!isbnLookup.containsKey(isbn))
            throw new IllegalArgumentException("ISBN [" + isbn + "] is not registered. Please register the book before updating.");
        return books.get(isbnLookup.get(isbn));
    }

    public Collection<Book> getAllBooks() {
        return books.values();
    }

    public int updateBook(String isbn, String title, List<String> authors, int page_count) {
        if (!isbnLookup.containsKey(isbn)) {
            throw new IllegalArgumentException("ISBN [" + isbn + "] is not registered. Please register the book before updating.");
        }
        Book updatedBook = new Book(isbn, title, authors, page_count);
        int id = isbnLookup.get(isbn);
        books.put(id, updatedBook);
        return id;
    }

    public int deleteBook(int bookId) {
        if (!books.containsKey(bookId)) {
            throw new IllegalArgumentException("BookID [" + bookId + "] is not valid.");
        }
        isbnLookup.remove(books.get(bookId).getIsbn());
        books.remove(bookId);
        return bookId;
    }

    public int deleteBook(String isbn) {
        if (!isbnLookup.containsKey(isbn)) {
            throw new IllegalArgumentException("ISBN" + isbn + "is not registered.");
        }
        int id = isbnLookup.get(isbn);
        books.remove(isbnLookup.get(isbn));
        isbnLookup.remove(isbn);
        return id;
    }
}


public class DBHandler {
    private final BookRepository db = new BookRepository();

    public int addBookHandler(TaskProto.Book book) {
        return db.addBook(book.getIsbn(), book.getTitle(), book.getAuthorsList(), book.getPageCount());
    }

    public int updateBookHandler(TaskProto.Book book) {
        return db.updateBook(book.getIsbn(), book.getTitle(), book.getAuthorsList(), book.getPageCount());
    }

    public int deleteBookHandler(TaskProto.BookIdentifier bkID) {
        if (bkID.hasBookId())  {
            return db.deleteBook(bkID.getBookId());
        } else if (bkID.hasBookIsbn()) {
            return db.deleteBook(bkID.getBookIsbn());
        } else {
            throw new IllegalArgumentException("Invalid Identifier recieved");
        }
    }

    public Book getBooksHandler(TaskProto.BookIdentifier bkID, List<Integer> fields) {
        if (bkID.hasBookId())  {
            return db.getBook(bkID.getBookId(), fields);
        } else if (bkID.hasBookIsbn()) {
            return db.getBook(bkID.getBookIsbn(), fields);
        } else {
            throw new IllegalArgumentException("Invalid Identifier");
        }
    }


}
