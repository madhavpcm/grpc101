/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.grpc.TaskProto;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

/**
 * TODO replace this with a mongoDB interface
 * A class to handle an in memory key-value store like database
 * - A random number generator is used to created ids
 */



/**
 * {@summary The DBHandler Class is an intermediary which takes data
 * disassembled by the gRPC endpoints and interfaces with Database}
 */
public class DBHandler {
    private final BookRepository db;

    public DBHandler(BookRepository db) {
        this.db = db;
    }

    /**
     * {@summary adds a book into the database, sanity checks are the database level}
     * @param book book to add (.proto Message)
     * @return returns a book id on success, -1 on failure
     */
    public int addBookHandler(TaskProto.Book book) {
        db.addBook(book.getIsbn(), book.getTitle(), book.getAuthorsList(), book.getPageCount());
        return db.addBook(book.getIsbn(), book.getTitle(), book.getAuthorsList(), book.getPageCount());
    }

    /**
     * {@summary updates a book into the database, sanity checks are the database level}
     * @param book book to update (.proto Message)
     * @return returns the same book id on success, -1 on failure
     */
    public int updateBookHandler(TaskProto.Book book) {
        return db.updateBook(book.getIsbn(), book.getTitle(), book.getAuthorsList(), book.getPageCount());
    }

    /**
     * {@summary deletes a book from the database, sanity checks are the database level}
     * @param bkID could be an ISBN or bookID from the database
     * @return returns the deleted book id on success, -1 on failure
     */
    public int deleteBookHandler(TaskProto.BookIdentifier bkID) {
        if (bkID.hasBookId())  {
            return db.deleteBook(bkID.getBookId());
        } else if (bkID.hasBookIsbn()) {
            return db.deleteBook(bkID.getBookIsbn());
        } else {
            throw new IllegalArgumentException("Invalid Identifier recieved");
        }
    }

    /**
     * TODO This function can be implemented in many ways, this is just a placeholder for now
     * {@summary gets a book from the database, sanity checks are the database level}
     * @param bkID could be an ISBN or bookID from the database
     * @param fields list of field ids from .proto:Book to filter
     * @return returns a Book on success
     */
    public Book getBooksHandler(TaskProto.BookIdentifier bkID, List<Integer> fields) {
        if (bkID.hasBookId())  {
            return db.getBook(bkID.getBookId(), fields);
        } else if (bkID.hasBookIsbn()) {
            return db.getBook(bkID.getBookIsbn(), fields);
        } else {
            throw new IllegalArgumentException("Invalid Identifier");
        }
    }


}
